import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3010/api';

async function testAPI() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Code Executor API\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...');
    try {
        const response = await fetch(`${API_BASE}/health`);
        const data = await response.json();
        console.log('‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç:', data.status);
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
        return;
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    console.log('\n2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤...');
    try {
        const response = await fetch(`${API_BASE}/languages`);
        const data = await response.json();
        console.log('‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:', data.data.languages.map(l => l.name).join(', '));
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    // –¢–µ—Å—Ç 3: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Python –∫–æ–¥–∞
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Python –∫–æ–¥–∞...');
    try {
        const response = await fetch(`${API_BASE}/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                language: 'python',
                code: 'print("Hello from Python!")\nfor i in range(3):\n    print(f"Count: {i}")',
                sessionId: 'test-session'
            })
        });
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ Python –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üìã –í—ã–≤–æ–¥:', data.result.output);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', data.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    // –¢–µ—Å—Ç 4: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ JavaScript –∫–æ–¥–∞
    console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript –∫–æ–¥–∞...');
    try {
        const response = await fetch(`${API_BASE}/execute`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                language: 'javascript',
                code: 'console.log("Hello from JavaScript!");\nconst sum = [1,2,3,4,5].reduce((a,b) => a+b, 0);\nconsole.log("Sum:", sum);',
                sessionId: 'test-session'
            })
        });
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ JavaScript –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            console.log('üìã –í—ã–≤–æ–¥:', data.result.output);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', data.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('\n5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
    try {
        const response = await fetch(`${API_BASE}/stats`);
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
            console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:', data.data.containers.activeContainers);
            console.log('üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π:', data.data.history.totalExecutions);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', data.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    // –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    console.log('\n6Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π...');
    try {
        const response = await fetch(`${API_BASE}/history?sessionId=test-session&limit=5`);
        const data = await response.json();
        
        if (data.success) {
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:', data.count);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', data.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testAPI().catch(console.error);
