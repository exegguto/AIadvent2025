import { HttpsProxyAgent } from 'https-proxy-agent';
import { SocksProxyAgent } from 'socks-proxy-agent';
import dotenv from 'dotenv';

dotenv.config();

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...\n');

// –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
const proxyUrl = process.env.HTTP_PROXY || process.env.HTTPS_PROXY || process.env.http_proxy || process.env.https_proxy;

if (!proxyUrl) {
    console.log('‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    console.log('üí° –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
    console.log('   HTTP_PROXY=socks5://127.0.0.1:2080');
    console.log('   HTTPS_PROXY=socks5://127.0.0.1:2080');
    console.log('   (–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ Nekoray)');
    process.exit(1);
}

console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ URL –Ω–∞–π–¥–µ–Ω:', proxyUrl);

// –°–æ–∑–¥–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
let agent;
if (proxyUrl.startsWith('socks5://') || proxyUrl.startsWith('socks4://')) {
  agent = new SocksProxyAgent(proxyUrl);
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º SOCKS –ø—Ä–æ–∫—Å–∏');
} else {
  agent = new HttpsProxyAgent(proxyUrl);
  console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏');
}

console.log('üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');

try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ ifconfig.io —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
    const response = await fetch('https://ifconfig.io', {
        agent: agent
    });
    
    if (response.ok) {
        const ip = await response.text();
        console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('üåê –í–∞—à IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', ip.trim());
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API
        console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
        
        const openaiResponse = await fetch('https://api.openai.com/v1/models', {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            agent: agent
        });
        
        if (openaiResponse.ok) {
            console.log('‚úÖ OpenAI API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏!');
            const data = await openaiResponse.json();
            console.log('üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:', data.data.length);
        } else {
            console.log('‚ùå OpenAI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏');
            console.log('–°—Ç–∞—Ç—É—Å:', openaiResponse.status);
        }
        
    } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏');
        console.log('–°—Ç–∞—Ç—É—Å:', response.status);
    }
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Nekoray –∑–∞–ø—É—â–µ–Ω');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏ (–æ–±—ã—á–Ω–æ 7890)');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ –≤ .env —Ñ–∞–π–ª–µ');
}
