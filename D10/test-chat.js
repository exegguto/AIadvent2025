import fetch from 'node-fetch';

const API_BASE = 'http://localhost:3010/api';

async function testChat() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Chat\n');

    const sessionId = 'test-chat-' + Date.now();

    // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å
    console.log('1Ô∏è‚É£ –¢–µ—Å—Ç: "–°–ª–æ–∂–∏ 2+2"');
    try {
        const response = await fetch(`${API_BASE}/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–°–ª–æ–∂–∏ 2+2',
                sessionId: sessionId
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI:', result.llmResponse);
            if (result.hasCode) {
                console.log('üìù –ö–æ–¥ –Ω–∞–π–¥–µ–Ω:', result.codeBlocks.length, '–±–ª–æ–∫–æ–≤');
                for (const block of result.codeBlocks) {
                    console.log(`   ${block.language}: ${block.code}`);
                }
            }
            if (result.executionResults && result.executionResults.length > 0) {
                console.log('üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
                for (const exec of result.executionResults) {
                    if (exec.result && exec.result.success) {
                        console.log(`   ${exec.language}: ${exec.result.output}`);
                    } else {
                        console.log(`   ${exec.language}: –û—à–∏–±–∫–∞ - ${exec.error}`);
                    }
                }
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 2: –í–æ–ø—Ä–æ—Å —Å —Ü–∏–∫–ª–æ–º
    console.log('2Ô∏è‚É£ –¢–µ—Å—Ç: "–ü–æ–∫–∞–∂–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5"');
    try {
        const response = await fetch(`${API_BASE}/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–ü–æ–∫–∞–∂–∏ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 5',
                sessionId: sessionId
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI:', result.llmResponse);
            if (result.hasCode) {
                console.log('üìù –ö–æ–¥ –Ω–∞–π–¥–µ–Ω:', result.codeBlocks.length, '–±–ª–æ–∫–æ–≤');
                for (const block of result.codeBlocks) {
                    console.log(`   ${block.language}: ${block.code}`);
                }
            }
            if (result.executionResults && result.executionResults.length > 0) {
                console.log('üöÄ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:');
                for (const exec of result.executionResults) {
                    if (exec.result && exec.result.success) {
                        console.log(`   ${exec.language}: ${exec.result.output}`);
                    } else {
                        console.log(`   ${exec.language}: –û—à–∏–±–∫–∞ - ${exec.error}`);
                    }
                }
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞');
    try {
        const response = await fetch(`${API_BASE}/chat/history?sessionId=${sessionId}&limit=10`);
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞');
            console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', result.count);
            console.log('üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:');
            result.data.slice(-3).forEach((msg, index) => {
                console.log(`   ${index + 1}. [${msg.role}] ${msg.content.substring(0, 50)}...`);
            });
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:', result.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
    console.log('4Ô∏è‚É£ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞');
    try {
        const response = await fetch(`${API_BASE}/chat/stats`);
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞');
            console.log('üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤:', result.data.activeConversations);
            console.log('üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', result.data.totalMessages);
            console.log('üìä –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä:', result.data.averageMessagesPerConversation);
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', result.error);
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏:', error.message);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testChat().catch(console.error);
