import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  CallToolRequest,
} from "@modelcontextprotocol/sdk/types.js";
import axios, { AxiosError } from "axios";
import { readFileSync } from "fs";
import { join } from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  try {
    const envPath = join(process.cwd(), '.env');
    const envContent = readFileSync(envPath, 'utf8');
    const envLines = envContent.split('\n');
    
    envLines.forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (value && !process.env[key]) {
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    // .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadEnvFile();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—à–∞—Ö
interface PushData extends Array<{
  id: number;
  type: string;
  actor: {
    login: string;
  };
  repo: {
    name: string;
  };
  created_at: string;
  payload?: {
    ref?: string;
    commits?: Array<{
      sha: string;
      message: string;
    }>;
  };
}> {}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è—Ö
interface RepoData {
  name: string;
  full_name: string;
  private: boolean;
  pushed_at: string;
}

// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const server = new Server(
  {
    name: "minimal-push-mcp-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è GitHub —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getGitHubToken(): string | undefined {
  return process.env.GITHUB_PAT || process.env.GITHUB_TOKEN;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
function createHeaders(): Record<string, string> {
  const headers: Record<string, string> = {
    'Accept': 'application/vnd.github.v3+json',
    'User-Agent': 'minimal-push-mcp-server',
  };

  const token = getGitHubToken();
  if (token) {
    headers['Authorization'] = `token ${token}`;
  }

  return headers;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "get_push_count",
        description: "–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—à–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub",
        inputSchema: {
          type: "object",
          properties: {
            username: {
              type: "string",
              description: "GitHub username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—à–∞—Ö",
            },
            days: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7)",
              default: 7,
            },
            include_private: {
              type: "boolean",
              description: "–í–∫–ª—é—á–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Ç—Ä–µ–±—É–µ—Ç GitHub PAT)",
              default: false,
            },
          },
          required: ["username"],
        },
      },
      {
        name: "get_user_stats",
        description: "–ü–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è GitHub",
        inputSchema: {
          type: "object",
          properties: {
            username: {
              type: "string",
              description: "GitHub username",
            },
          },
          required: ["username"],
        },
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
server.setRequestHandler(CallToolRequestSchema, async (request: CallToolRequest) => {
  const { name, arguments: args } = request.params;

  if (name === "get_push_count") {
    try {
      const { username, days = 7, include_private = false } = args as { 
        username: string; 
        days?: number; 
        include_private?: boolean;
      };
      
      // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
      const startDate = new Date();
      startDate.setDate(startDate.getDate() - days);
      const startDateStr = startDate.toISOString().split('T')[0];

      const headers = createHeaders();
      const token = getGitHubToken();

      // –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
      if (include_private && !token) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º —Ç—Ä–µ–±—É–µ—Ç—Å—è GitHub Personal Access Token (GITHUB_PAT)",
            },
          ],
          isError: true,
        };
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ GitHub API
      const response = await axios.get<PushData>(
        `https://api.github.com/users/${username}/events`,
        {
          params: {
            per_page: 100,
          },
          headers,
        }
      );

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—à–µ–π –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
      const pushEvents = response.data.filter(
        (event: any) => event.type === "PushEvent"
      );

      const pushCount = pushEvents.length;
      const totalEvents = response.data.length;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—É—à–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const repoStats = new Map<string, number>();
      let totalCommits = 0;

      pushEvents.forEach((event: any) => {
        const repoName = event.repo.name;
        repoStats.set(repoName, (repoStats.get(repoName) || 0) + 1);
        
        if (event.payload?.commits) {
          totalCommits += event.payload.commits.length;
        }
      });

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—É—à–µ–π
      const topRepos = Array.from(repoStats.entries())
        .sort(([,a], [,b]) => b - a)
        .slice(0, 5);

      let resultText = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **${username}** –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} –¥–Ω–µ–π:\n\n`;
      resultText += `üî¢ **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É—à–µ–π:** ${pushCount}\n`;
      resultText += `üìù **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–∏—Ç–æ–≤:** ${totalCommits}\n`;
      resultText += `üìà **–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π:** ${totalEvents}\n`;
      resultText += `üìä **–ü—Ä–æ—Ü–µ–Ω—Ç –ø—É—à–µ–π:** ${totalEvents > 0 ? ((pushCount / totalEvents) * 100).toFixed(1) : 0}%\n\n`;

      if (topRepos.length > 0) {
        resultText += `üèÜ **–¢–æ–ø —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –ø–æ –ø—É—à–∞–º:**\n`;
        topRepos.forEach(([repo, count], index) => {
          resultText += `${index + 1}. \`${repo}\` - ${count} –ø—É—à${count === 1 ? '' : '–µ–π'}\n`;
        });
        resultText += `\n`;
      }

      resultText += `üìÖ –ü–µ—Ä–∏–æ–¥: —Å ${startDateStr} –ø–æ ${new Date().toISOString().split('T')[0]}`;

      if (token) {
        resultText += `\nüîê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è GitHub PAT (–≤–∫–ª—é—á–∞—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)`;
      } else {
        resultText += `\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—É–±–ª–∏—á–Ω—ã–π API (—Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏)`;
      }

      return {
        content: [
          {
            type: "text",
            text: resultText,
          },
        ],
        isError: false,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—à–∞—Ö:", error);
      
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 403) {
          errorMessage = "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GitHub API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GitHub PAT.";
        } else if (error.response?.status === 404) {
          errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        } else {
          errorMessage = `HTTP ${error.response?.status}: ${error.response?.statusText}`;
        }
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        content: [
          {
            type: "text",
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É—à–∞—Ö: ${errorMessage}`,
          },
        ],
        isError: true,
      };
    }
  }

  if (name === "get_user_stats") {
    try {
      const { username } = args as { username: string };
      
      const headers = createHeaders();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userResponse = await axios.get(
        `https://api.github.com/users/${username}`,
        { headers }
      );

      const user = userResponse.data;

      let resultText = `üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ${username}:**\n\n`;
      resultText += `üìä **–ü—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:** ${user.public_repos}\n`;
      resultText += `üë• **–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:** ${user.followers}\n`;
      resultText += `üë§ **–ü–æ–¥–ø–∏—Å–∫–∏:** ${user.following}\n`;
      resultText += `‚≠ê **–ó–≤–µ–∑–¥—ã:** ${user.public_gists}\n`;
      resultText += `üìÖ **–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:** ${new Date(user.created_at).toLocaleDateString()}\n`;

      if (user.bio) {
        resultText += `üìù **–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:** ${user.bio}\n`;
      }

      if (user.location) {
        resultText += `üìç **–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:** ${user.location}\n`;
      }

      return {
        content: [
          {
            type: "text",
            text: resultText,
          },
        ],
        isError: false,
      };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
      
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 404) {
          errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω";
        } else {
          errorMessage = `HTTP ${error.response?.status}: ${error.response?.statusText}`;
        }
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        content: [
          {
            type: "text",
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${errorMessage}`,
          },
        ],
        isError: true,
      };
    }
  }

  throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("üöÄ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—É—à–µ–π –∑–∞–ø—É—â–µ–Ω");
  
  const token = getGitHubToken();
  if (token) {
    console.error("üîê GitHub PAT –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è–º –≤–∫–ª—é—á–µ–Ω");
  } else {
    console.error("‚ö†Ô∏è GitHub PAT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏");
  }
}

main().catch((error) => {
  console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
  process.exit(1);
});
