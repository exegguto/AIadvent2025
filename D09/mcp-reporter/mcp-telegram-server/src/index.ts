import { Server } from "@modelcontextprotocol/sdk/server/index.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import {
  CallToolRequestSchema,
  ListToolsRequestSchema,
  CallToolRequest,
} from "@modelcontextprotocol/sdk/types.js";
import axios, { AxiosError } from "axios";
import { readFileSync } from "fs";
import { join } from "path";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  try {
    const envPath = join(process.cwd(), '.env');
    const envContent = readFileSync(envPath, 'utf8');
    const envLines = envContent.split('\n');
    
    envLines.forEach(line => {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        if (value && !process.env[key]) {
          process.env[key] = value;
        }
      }
    });
  } catch (error) {
    // .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
loadEnvFile();

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ Telegram API
interface TelegramResponse {
  ok: boolean;
  result?: any;
  description?: string;
}

// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
const server = new Server(
  {
    name: "mcp-telegram-server",
    version: "1.0.0",
  },
  {
    capabilities: {
      tools: {},
    },
  }
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getTelegramToken(): string | undefined {
  return process.env.TG_BOT_TOKEN || process.env.TELEGRAM_BOT_TOKEN;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Telegram Chat ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getTelegramChatId(): string | undefined {
  return process.env.TG_CHAT_ID || process.env.TELEGRAM_CHAT_ID;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
server.setRequestHandler(ListToolsRequestSchema, async () => {
  return {
    tools: [
      {
        name: "send_message",
        description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç",
        inputSchema: {
          type: "object",
          properties: {
            text: {
              type: "string",
              description: "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏",
            },
            chat_id: {
              type: "string",
              description: "ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TG_CHAT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)",
            },
            parse_mode: {
              type: "string",
              description: "–†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML, –∏–ª–∏ plain text)",
              enum: ["Markdown", "HTML", "text"],
              default: "Markdown",
            },
          },
          required: ["text"],
        },
      },
      {
        name: "send_push_stats",
        description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É—à–µ–π –≤ Telegram",
        inputSchema: {
          type: "object",
          properties: {
            username: {
              type: "string",
              description: "GitHub username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            },
            days: {
              type: "number",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
              default: 1,
            },
            chat_id: {
              type: "string",
              description: "ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TG_CHAT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)",
            },
          },
          required: ["username"],
        },
      },
      {
        name: "send_hourly_report",
        description: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –≤ Telegram",
        inputSchema: {
          type: "object",
          properties: {
            username: {
              type: "string",
              description: "GitHub username –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            },
            chat_id: {
              type: "string",
              description: "ID —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è TG_CHAT_ID –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)",
            },
          },
          required: ["username"],
        },
      },
    ],
  };
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
server.setRequestHandler(CallToolRequestSchema, async (request: CallToolRequest) => {
  const { name, arguments: args } = request.params;

  if (name === "send_message") {
    try {
      const { text, chat_id, parse_mode = "Markdown" } = args as { 
        text: string; 
        chat_id?: string; 
        parse_mode?: string;
      };
      
      const token = getTelegramToken();
      const targetChatId = chat_id || getTelegramChatId();

      if (!token) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN –∏–ª–∏ TELEGRAM_BOT_TOKEN",
            },
          ],
          isError: true,
        };
      }

      if (!targetChatId) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω. –£–∫–∞–∂–∏—Ç–µ chat_id –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_CHAT_ID",
            },
          ],
          isError: true,
        };
      }

      const url = `https://api.telegram.org/bot${token}/sendMessage`;
      const payload: any = {
        chat_id: targetChatId,
        text: text,
      };

      if (parse_mode !== "text") {
        payload.parse_mode = parse_mode;
      }

      const response = await axios.post<TelegramResponse>(url, payload);

      if (response.data.ok) {
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram\n\nüìù –¢–µ–∫—Å—Ç: ${text.substring(0, 100)}${text.length > 100 ? '...' : ''}\nüí¨ Chat ID: ${targetChatId}`,
            },
          ],
          isError: false,
        };
      } else {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.data.description}`,
            },
          ],
          isError: true,
        };
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
      
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      if (axios.isAxiosError(error)) {
        if (error.response?.status === 401) {
          errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π Telegram Bot Token";
        } else if (error.response?.status === 400) {
          errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π Chat ID –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è";
        } else {
          errorMessage = `HTTP ${error.response?.status}: ${error.response?.statusText}`;
        }
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        content: [
          {
            type: "text",
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${errorMessage}`,
          },
        ],
        isError: true,
      };
    }
  }

  if (name === "send_push_stats") {
    try {
      const { username, days = 1, chat_id } = args as { 
        username: string; 
        days?: number; 
        chat_id?: string;
      };
      
      const token = getTelegramToken();
      const targetChatId = chat_id || getTelegramChatId();

      if (!token) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            },
          ],
          isError: true,
        };
      }

      if (!targetChatId) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω",
            },
          ],
          isError: true,
        };
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      const now = new Date();
      const timeStr = now.toLocaleString('ru-RU', { 
        timeZone: 'Europe/Moscow',
        hour: '2-digit', 
        minute: '2-digit' 
      });

      let message = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π GitHub**\n\n`;
      message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${username}\n`;
      message += `üìÖ **–ü–µ—Ä–∏–æ–¥:** –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${days} ${days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}\n`;
      message += `‚è∞ **–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞:** ${timeStr}\n\n`;
      message += `‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ minimal-push-mcp-server`;

      const url = `https://api.telegram.org/bot${token}/sendMessage`;
      const response = await axios.post<TelegramResponse>(url, {
        chat_id: targetChatId,
        text: `D09\n\n${message}`,
        parse_mode: "Markdown"
      });

      if (response.data.ok) {
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\nüìÖ –ü–µ—Ä–∏–æ–¥: ${days} ${days === 1 ? '–¥–µ–Ω—å' : days < 5 ? '–¥–Ω—è' : '–¥–Ω–µ–π'}`,
            },
          ],
          isError: false,
        };
      } else {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${response.data.description}`,
            },
          ],
          isError: true,
        };
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—à–µ–π:", error);
      
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      if (axios.isAxiosError(error)) {
        errorMessage = `HTTP ${error.response?.status}: ${error.response?.statusText}`;
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        content: [
          {
            type: "text",
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—à–µ–π: ${errorMessage}`,
          },
        ],
        isError: true,
      };
    }
  }

  if (name === "send_hourly_report") {
    try {
      const { username, chat_id } = args as { 
        username: string; 
        chat_id?: string;
      };
      
      const token = getTelegramToken();
      const targetChatId = chat_id || getTelegramChatId();

      if (!token) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            },
          ],
          isError: true,
        };
      }

      if (!targetChatId) {
        return {
          content: [
            {
              type: "text",
              text: "‚ùå Chat ID –Ω–µ —É–∫–∞–∑–∞–Ω",
            },
          ],
          isError: true,
        };
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç
      const now = new Date();
      const timeStr = now.toLocaleString('ru-RU', { 
        timeZone: 'Europe/Moscow',
        hour: '2-digit', 
        minute: '2-digit' 
      });

      let message = `‚è∞ **–ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç**\n\n`;
      message += `üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${username}\n`;
      message += `üïê **–í—Ä–µ–º—è:** ${timeStr}\n`;
      message += `üìä **–°—Ç–∞—Ç—É—Å:** –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å\n\n`;
      message += `‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ minimal-push-mcp-server`;

      const url = `https://api.telegram.org/bot${token}/sendMessage`;
      const response = await axios.post<TelegramResponse>(url, {
        chat_id: targetChatId,
        text: `D09\n\n${message}`,
        parse_mode: "Markdown"
      });

      if (response.data.ok) {
        return {
          content: [
            {
              type: "text",
              text: `‚úÖ –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram\n\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\nüïê –í—Ä–µ–º—è: ${timeStr}`,
            },
          ],
          isError: false,
        };
      } else {
        return {
          content: [
            {
              type: "text",
              text: `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: ${response.data.description}`,
            },
          ],
          isError: true,
        };
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞:", error);
      
      let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
      if (axios.isAxiosError(error)) {
        errorMessage = `HTTP ${error.response?.status}: ${error.response?.statusText}`;
      } else if (error instanceof Error) {
        errorMessage = error.message;
      }
      
      return {
        content: [
          {
            type: "text",
            text: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—á–∞—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: ${errorMessage}`,
          },
        ],
        isError: true,
      };
    }
  }

  throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("üöÄ MCP Telegram —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω");
  
  const token = getTelegramToken();
  const chatId = getTelegramChatId();
  
  if (token) {
    console.error("üîê Telegram Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
  } else {
    console.error("‚ö†Ô∏è Telegram Bot Token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
  }
  
  if (chatId) {
    console.error("üí¨ Chat ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
  } else {
    console.error("‚ö†Ô∏è Chat ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
  }
}

main().catch((error) => {
  console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
  process.exit(1);
});
