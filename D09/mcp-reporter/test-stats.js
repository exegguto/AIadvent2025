import { getPushStats, sendPushStatsToTelegram, cleanup } from './src/mcpOrchestrator.js';

async function testStats() {
  console.log("üöÄ D09 - –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—à–µ–π\n");

  try {
    const username = 'exegguto';
    
    console.log("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—à–µ–π GitHub...");
    const pushStats = await getPushStats(username, 1);
    
    if (pushStats) {
      console.log("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:");
      console.log("=".repeat(60));
      console.log(pushStats);
      console.log("=".repeat(60));
      
      console.log("\nüì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Telegram...");
      const result = await sendPushStatsToTelegram(username, 1);
      console.log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏:", result ? "–£—Å–ø–µ—à–Ω–æ" : "–û—à–∏–±–∫–∞");
    } else {
      console.log("‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞");
    }
    
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    cleanup();
    console.log("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

testStats();
