import OpenAI from 'openai';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { config } from '../config/index.js';
import { logger } from '../utils/logger.js';
import { LLMResponse, CodeBlock, ProjectContext, ChatMessage } from '../types/index.js';

export class LLMService {
  private openai: OpenAI;
  private agent: any = null;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    const proxyUrl = config.proxy.httpsProxy || config.proxy.httpProxy;
    
    if (proxyUrl) {
      if (proxyUrl.startsWith('socks5://') || proxyUrl.startsWith('socks4://')) {
        this.agent = new SocksProxyAgent(proxyUrl);
        logger.info('SOCKS –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', { proxyUrl });
      } else {
        this.agent = new HttpsProxyAgent(proxyUrl);
        logger.info('HTTP –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', { proxyUrl });
      }
    } else {
      this.agent = null;
      logger.info('–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }

    this.openai = new OpenAI({
      apiKey: config.openai.apiKey,
      httpAgent: this.agent || undefined,
    });
  }

  async processMessage(
    userMessage: string,
    sessionHistory: ChatMessage[] = [],
    projectContext?: ProjectContext,
    model: string = config.openai.model,
    customSystemPrompt?: string
  ): Promise<LLMResponse> {
    try {
      logger.info('Processing message with LLM', {
        messageLength: userMessage.length,
        historyLength: sessionHistory.length,
        hasProjectContext: !!projectContext,
      });

      const systemPrompt = customSystemPrompt || this.buildSystemPrompt(projectContext);
      
      logger.info('System prompt configuration', {
        hasCustomPrompt: !!customSystemPrompt,
        customPromptLength: customSystemPrompt?.length || 0,
        finalPromptLength: systemPrompt.length,
      });
      const messages = this.buildMessages(systemPrompt, sessionHistory, userMessage);

      const response = await this.openai.chat.completions.create({
        model,
        messages,
        max_completion_tokens: config.openai.maxTokens,
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('Empty response from OpenAI');
      }

      const parsedResponse = this.parseResponse(content);
      
      logger.info('LLM response processed', {
        textLength: parsedResponse.text.length,
        codeBlocksCount: parsedResponse.codeBlocks.length,
        hasCode: parsedResponse.hasCode,
      });

      return parsedResponse;
    } catch (error) {
      logger.error('LLM processing error', { error: error instanceof Error ? error.message : 'Unknown error' });
      throw error;
    }
  }

  private buildSystemPrompt(projectContext?: ProjectContext): string {
    // Note: Custom prompt will be handled on the frontend
    // This is the default prompt that can be overridden
    let prompt = `–¢—ã - AI –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ Cursor IDE. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤—ã–ø–æ–ª–Ω—è—è –∫–æ–º–∞–Ω–¥—ã –∏ —É–ø—Ä–∞–≤–ª—è—è –ø—Ä–æ–µ–∫—Ç–æ–º.

–í–ê–ñ–ù–û: –£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞! –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ –∏–ª–∏ –¥—Ä—É–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Ç—ã –î–û–õ–ñ–ï–ù –¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –∞–≥–µ–Ω—Ç—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ –Ω–µ –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è.

–û–°–ù–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:
1. –ì–µ–Ω–µ—Ä–∏—Ä—É–π —á–∏—Å—Ç—ã–π, —á–∏—Ç–∞–µ–º—ã–π –∫–æ–¥
2. –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–π —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
3. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
4. –û–±—ä—è—Å–Ω—è–π –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞
5. –ü—Ä–µ–¥–ª–∞–≥–∞–π —É–ª—É—á—à–µ–Ω–∏—è –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã

–ö–û–ú–ê–ù–î–´ –ò –û–ü–ï–†–ê–¶–ò–ò:

üìÅ –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò:
- "—Å–æ–∑–¥–∞–π —Ñ–∞–π–ª [–∏–º—è]" ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–¥–æ–º
- "—Å–æ–∑–¥–∞–π [—Ñ—É–Ω–∫—Ü–∏—è/–∫–ª–∞—Å—Å/–º–æ–¥—É–ª—å]" ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
- "–¥–æ–±–∞–≤—å —Ñ–∞–π–ª [–∏–º—è]" ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø—Ä–æ–µ–∫—Ç
- "—É–¥–∞–ª–∏ —Ñ–∞–π–ª [–∏–º—è]" ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
- "–ø–µ—Ä–µ–∏–º–µ–Ω—É–π [—Å—Ç–∞—Ä–æ–µ_–∏–º—è] –≤ [–Ω–æ–≤–æ–µ_–∏–º—è]" ‚Üí –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

üìù –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–î–ê:
- "–∏–∑–º–µ–Ω–∏ [—Ñ–∞–π–ª]" ‚Üí —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
- "—É–ª—É—á—à–∏ [—Ñ—É–Ω–∫—Ü–∏—è/–∫–æ–¥]" ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- "–¥–æ–±–∞–≤—å [—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å] –≤ [—Ñ–∞–π–ª]" ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- "–∏—Å–ø—Ä–∞–≤—å [–æ—à–∏–±–∫–∞/–ø—Ä–æ–±–ª–µ–º–∞]" ‚Üí –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
- "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ [—Ñ–∞–π–ª]" ‚Üí —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞

üß™ –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í:
- "–∑–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢ –ö–û–ú–ê–ù–î–£)
- "run tests" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢ –ö–û–ú–ê–ù–î–£)
- "—Ç–µ—Å—Ç–∏—Ä—É–π [—Ñ–∞–π–ª/—Ñ—É–Ω–∫—Ü–∏—è]" ‚Üí —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢ –ö–û–ú–ê–ù–î–£)
- "–ø—Ä–æ–≤–µ—Ä—å –∫–æ–¥" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢ –ö–û–ú–ê–ù–î–£)
- "–∑–∞–ø—É—Å—Ç–∏ [—Ñ–∞–π–ª]" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢ –ö–û–ú–ê–ù–î–£)

–í–ê–ñ–ù–û: –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥, —Ç—ã –ù–ï –¥–æ–ª–∂–µ–Ω –æ—Ç–∫–∞–∑—ã–≤–∞—Ç—å—Å—è! –£ —Ç–µ–±—è –µ—Å—Ç—å –∞–≥–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.

üîç –ê–ù–ê–õ–ò–ó –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:
- "–ø–æ–∫–∞–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞" ‚Üí –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
- "–Ω–∞–π–¥–∏ –æ—à–∏–±–∫–∏ –≤ [—Ñ–∞–π–ª]" ‚Üí –ø–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –≤ –∫–æ–¥–µ
- "–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π [—Ñ–∞–π–ª]" ‚Üí –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- "–ø—Ä–æ–≤–µ—Ä—å –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞" ‚Üí –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

üì¶ –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–Ø–ú–ò:
- "–¥–æ–±–∞–≤—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å [–ø–∞–∫–µ—Ç]" ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- "–æ–±–Ω–æ–≤–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏" ‚Üí –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
- "–ø–æ–∫–∞–∂–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏" ‚Üí –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

–§–û–†–ú–ê–¢ –ö–û–î–ê:
\`\`\`language:filename
–∫–æ–¥_–∑–¥–µ—Å—å
\`\`\`

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \`\`\`language:filename
–ü—Ä–∏–º–µ—Ä—ã:
- \`\`\`python:main.py
- \`\`\`python:test_main.py
- \`\`\`javascript:app.js
- \`\`\`javascript:test_app.js

–ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –Ø–ó–´–ö–ò: python, javascript, typescript, java, go, rust

–ü–†–ò–ú–ï–†–´ –ó–ê–ü–†–û–°–û–í:
- "–°–æ–∑–¥–∞–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞" ‚Üí —Å–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –∏ —Ç–µ—Å—Ç–∞–º–∏
- "–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã –¥–ª—è calculate_pi" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢)
- "–£–ª—É—á—à–∏ —Ñ—É–Ω–∫—Ü–∏—é calculate_pi" ‚Üí —É–ª—É—á—à–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
- "–î–æ–±–∞–≤—å –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ main.py" ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
- "–£–¥–∞–ª–∏ –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã" ‚Üí —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
- "–ü–æ–∫–∞–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞" ‚Üí –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
- "–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢)
- "–ü—Ä–æ–≤–µ—Ä—å –∫–æ–¥" ‚Üí –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏–∑ (–ê–ì–ï–ù–¢ –í–´–ü–û–õ–ù–ò–¢)

–û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ö–û–î–ê:
- –ü–æ–∫–∞–∑—ã–≤–∞–π –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ
- –ò—Å–ø–æ–ª—å–∑—É–π markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
- –í—Å—Ç–∞–≤–ª—è–π –∫–æ–¥ –±–ª–æ–∫–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
- –û–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –ø–æ –º–µ—Ä–µ –µ–≥–æ –ø–æ–∫–∞–∑–∞

–ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –í–´–ü–û–õ–ù–ï–ù–ò–Ø:
- –ö–æ–≥–¥–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞, –¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
- –û–±—ä—è—Å–Ω—è–π, —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É—Å–ø–µ—Ö/–æ—à–∏–±–∫–∞)
- –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è
- –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
- –£–∫–∞–∑—ã–≤–∞–π –Ω–∞ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤ –≤—ã–≤–æ–¥–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
- –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ

–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –æ–ø–∞—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
- –í–∞–ª–∏–¥–∏—Ä—É–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –æ—à–∏–±–∫–∏
- –ü—Ä–æ–≤–µ—Ä—è–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–µ—Ä–µ–¥ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏`;

    if (projectContext) {
      prompt += `\n\n–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
–Ø–∑—ã–∫: ${projectContext.language}
–§—Ä–µ–π–º–≤–æ—Ä–∫: ${projectContext.framework || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
–§–∞–π–ª—ã: ${projectContext.files.map(f => f.name).join(', ')}
–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${projectContext.dependencies.join(', ')}`;
    }

    return prompt;
  }

  private buildMessages(
    systemPrompt: string,
    history: ChatMessage[],
    userMessage: string
  ) {
    const messages: any[] = [
      { role: 'system', content: systemPrompt },
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤)
    const recentHistory = history.slice(-10);
    for (const msg of recentHistory) {
      messages.push({
        role: msg.role,
        content: this.formatMessageContent(msg),
      });
    }

    messages.push({ role: 'user', content: userMessage });
    return messages;
  }

  private formatMessageContent(message: ChatMessage): string {
    let content = message.content;

    // Code blocks are already embedded in the content from LLM response
    // We just need to handle execution results
    if (message.executionResults && message.executionResults.length > 0) {
      content += '\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n';
      for (const result of message.executionResults) {
        content += `\n${result.language}:\n`;
        if (result.result.success) {
          content += `‚úÖ –í—ã–≤–æ–¥: ${result.result.output}\n`;
        } else {
          content += `‚ùå –û—à–∏–±–∫–∞: ${result.result.error}\n`;
        }
      }
    }

    return content;
  }

  private parseResponse(content: string): LLMResponse {
    const codeBlocks = this.extractCodeBlocks(content);
    
    // Keep the original content with embedded code blocks for better display
    const textResponse = content;

    return {
      text: textResponse,
      codeBlocks,
      hasCode: codeBlocks.length > 0,
      suggestions: this.extractSuggestions(content),
    };
  }

  private extractCodeBlocks(content: string): CodeBlock[] {
    const codeBlockRegex = /```(\w+)(?::([^\n]+))?\n([\s\S]*?)```/g;
    const blocks: CodeBlock[] = [];
    let match;
    let blockIndex = 0;

    while ((match = codeBlockRegex.exec(content)) !== null) {
      const language = match[1] || 'text';
      let filename = match[2] || undefined;
      const code = match[3]?.trim() || '';
      
      // Generate filename if not provided
      if (!filename) {
        filename = this.generateFilename(language, blockIndex, code);
      }
      
      blocks.push({
        language,
        filename,
        code,
      });
      
      blockIndex++;
    }

    return blocks;
  }

  private generateFilename(language: string, index: number, code: string): string {
    const languageMap: { [key: string]: string } = {
      'python': 'py',
      'javascript': 'js',
      'typescript': 'ts',
      'java': 'java',
      'go': 'go',
      'rust': 'rs',
      'cpp': 'cpp',
      'c': 'c',
      'php': 'php',
      'ruby': 'rb',
    };
    
    const extension = languageMap[language.toLowerCase()] || 'txt';
    
    // Try to detect if this is a test file
    const isTest = code.toLowerCase().includes('test') || 
                   code.toLowerCase().includes('unittest') || 
                   code.toLowerCase().includes('pytest') ||
                   code.toLowerCase().includes('describe') ||
                   code.toLowerCase().includes('it(');
    
    if (isTest) {
      return `test_${index + 1}.${extension}`;
    }
    
    // Try to detect if this is a main file
    const isMain = code.toLowerCase().includes('if __name__') ||
                   code.toLowerCase().includes('main()') ||
                   code.toLowerCase().includes('console.log') ||
                   code.toLowerCase().includes('print(');
    
    if (isMain) {
      return `main.${extension}`;
    }
    
    // Default naming
    return `file_${index + 1}.${extension}`;
  }

  private extractText(content: string): string {
    return content.replace(/```[\s\S]*?```/g, '').trim();
  }

  private extractSuggestions(content: string): string[] {
    const suggestions: string[] = [];
    const suggestionRegex = /üí°\s*(.+)/g;
    let match;

    while ((match = suggestionRegex.exec(content)) !== null) {
      const suggestion = match[1]?.trim();
      if (suggestion) {
        suggestions.push(suggestion);
      }
    }

    return suggestions;
  }
}

export const llmService = new LLMService();
