const BASE_URL = 'http://localhost:3010';

async function testChatComparisonFixed() {
    console.log('üîç Testing Fixed Chat Comparison Feature...\n');

    try {
        // 1. Create two test projects with different chat histories
        console.log('1. Creating test projects with chat histories...');
        
        const project1Response = await fetch(`${BASE_URL}/api/projects`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name: '–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 1',
                language: 'python',
                description: '–ü–µ—Ä–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'
            })
        });

        const project1Data = await project1Response.json();
        if (!project1Data.success) {
            throw new Error('Failed to create project 1: ' + project1Data.error);
        }

        const project2Response = await fetch(`${BASE_URL}/api/projects`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                name: '–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 2',
                language: 'python',
                description: '–í—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è'
            })
        });

        const project2Data = await project2Response.json();
        if (!project2Data.success) {
            throw new Error('Failed to create project 2: ' + project2Data.error);
        }

        const project1Id = project1Data.data.id;
        const project2Id = project2Data.data.id;
        
        console.log(`‚úÖ Project 1 created: ${project1Id}`);
        console.log(`‚úÖ Project 2 created: ${project2Id}`);

        // 2. Create different chat histories
        console.log('\n2. Creating different chat histories...');
        
        // Project 1: Simple function
        await fetch(`${BASE_URL}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª',
                sessionId: `test-chat1-${Date.now()}`,
                projectId: project1Id,
                shouldExecute: false,
                model: 'gpt-4'
            })
        });

        // Project 2: Complex function
        await fetch(`${BASE_URL}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –º–æ–¥—É–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏',
                sessionId: `test-chat2-${Date.now()}`,
                projectId: project2Id,
                shouldExecute: false,
                model: 'gpt-4'
            })
        });

        // Add follow-up messages
        await fetch(`${BASE_URL}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è',
                sessionId: `test-chat1-followup-${Date.now()}`,
                projectId: project1Id,
                shouldExecute: false,
                model: 'gpt-4'
            })
        });

        await fetch(`${BASE_URL}/api/chat`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                message: '–î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è',
                sessionId: `test-chat2-followup-${Date.now()}`,
                projectId: project2Id,
                shouldExecute: false,
                model: 'gpt-4'
            })
        });

        console.log('‚úÖ Chat histories created successfully');

        // 3. Test the comparison functionality
        console.log('\n3. Testing chat comparison with Russian interface...');
        
        const comparisonResponse = await fetch(`${BASE_URL}/api/chat`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                message: `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ —ç—Ç–∏ –¥–≤–∞ –¥–∏–∞–ª–æ–≥–∞:

–î–ò–ê–õ–û–ì 1 (–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 1):
[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª
[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: [–û—Ç–≤–µ—Ç —Å –ø—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π]
[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: –î–æ–±–∞–≤—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–ª–æ–∂–µ–Ω–∏—è
[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: [–û—Ç–≤–µ—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫]

–î–ò–ê–õ–û–ì 2 (–¢–µ—Å—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è 2):
[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –∏ –º–æ–¥—É–ª—å–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: [–û—Ç–≤–µ—Ç —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º]
[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]: –î–æ–±–∞–≤—å –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∫–æ—Ä–Ω—è
[–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç]: [–û—Ç–≤–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –º–µ—Ç–æ–¥–æ–º]

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤, —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–≤—à–∏—Å—å –Ω–∞:
1. –ö–∞—á–µ—Å—Ç–≤–µ –∏ –ø–æ–ª–Ω–æ—Ç–µ –∫–æ–¥–∞
2. –Ø—Å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
3. –ü–æ–¥—Ö–æ–¥–µ –∫ —Ä–µ—à–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º
4. –†–∞–∑–ª–∏—á–∏—è—Ö –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –∞–Ω–∞–ª–∏–∑ –≤ —á–µ—Ç–∫–æ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –æ–±–µ–∏—Ö –±–µ—Å–µ–¥.`,
                sessionId: `comparison-test-fixed-${Date.now()}`,
                shouldExecute: false,
                model: 'gpt-4'
            })
        });

        const comparisonData = await comparisonResponse.json();
        
        if (comparisonData.success) {
            console.log('‚úÖ Chat comparison analysis completed successfully');
            console.log('\nüìä Comparison Analysis Preview:');
            console.log(comparisonData.message.content.substring(0, 500) + '...');
            
            console.log('\nüéâ Fixed chat comparison feature test completed!');
            console.log('\nüìù What was tested:');
            console.log('   - Created two different projects with Russian names');
            console.log('   - Generated different types of code (simple vs complex)');
            console.log('   - Added follow-up messages to create richer conversations');
            console.log('   - Successfully requested LLM analysis in Russian');
            console.log('   - Received structured comparison analysis');
            
            console.log('\nüîß How to use in the UI:');
            console.log('   1. Open http://localhost:3010 in browser');
            console.log('   2. Select any project with chat history');
            console.log('   3. Click "Compare Chats" button');
            console.log('   4. Current project should be auto-selected as first');
            console.log('   5. Select second project for comparison');
            console.log('   6. Customize the analysis prompt if needed');
            console.log('   7. Click "–°—Ä–∞–≤–Ω–∏—Ç—å –¥–∏–∞–ª–æ–≥–∏" to get AI analysis');
            
            console.log('\n‚ú® New features:');
            console.log('   - Russian interface in modal');
            console.log('   - Auto-selection of current project');
            console.log('   - Better project loading in selects');
            console.log('   - Russian error messages');
            console.log('   - Russian analysis prompts');
            
        } else {
            throw new Error('Failed to get comparison analysis: ' + comparisonData.error);
        }

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        process.exit(1);
    }
}

// Run the test
testChatComparisonFixed();
