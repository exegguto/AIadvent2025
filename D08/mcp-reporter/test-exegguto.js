import { spawn } from "child_process";
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";

async function testExegguto() {
  console.log("üöÄ –¢–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ exegguto\n");

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  const transport = new StdioClientTransport({
    command: "node",
    args: ["./dist/index.js"],
  });
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  const client = new Client({
    name: "exegguto-test-client",
    version: "1.0.0",
  });

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await client.connect(transport);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const tools = await client.listTools();
    console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:");
    tools.tools.forEach(tool => {
      console.log(`  - ${tool.name}: ${tool.description}`);
    });
    console.log();

    // –¢–µ—Å—Ç 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    console.log("üîç –¢–µ—Å—Ç 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –¥–ª—è 'exegguto' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");
    const pushResult = await client.callTool({
      name: "get_push_count",
      arguments: {
        username: "exegguto",
        days: 7
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    pushResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });
    console.log("\n" + "=".repeat(60) + "\n");

    // –¢–µ—Å—Ç 2: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üîç –¢–µ—Å—Ç 2: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'exegguto'");
    const userResult = await client.callTool({
      name: "get_user_stats",
      arguments: {
        username: "exegguto"
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    userResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });
    console.log("\n" + "=".repeat(60) + "\n");

    // –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    console.log("üîç –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –∑–∞ 30 –¥–Ω–µ–π");
    const longTermResult = await client.callTool({
      name: "get_push_count",
      arguments: {
        username: "exegguto",
        days: 30
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    longTermResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    await client.close();
    console.log("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
  }
}

testExegguto().catch(console.error);
