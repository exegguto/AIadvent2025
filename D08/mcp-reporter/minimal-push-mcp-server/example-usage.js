import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";
import { spawn } from "child_process";

async function exampleUsage() {
  console.log("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—É—à–µ–π\n");

  // –ó–∞–ø—É—Å–∫–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
  const serverProcess = spawn("node", ["./dist/index.js"], {
    stdio: ["pipe", "pipe", "pipe"],
  });

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  const transport = new StdioClientTransport(serverProcess.stdin, serverProcess.stdout);
  
  // –°–æ–∑–¥–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
  const client = new Client({
    name: "example-client",
    version: "1.0.0",
  });

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    await client.connect(transport);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const tools = await client.listTools();
    console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:");
    tools.tools.forEach(tool => {
      console.log(`  - ${tool.name}: ${tool.description}`);
    });
    console.log();

    // –ü—Ä–∏–º–µ—Ä 1: –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É—à–µ–π –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üîç –ü—Ä–∏–º–µ—Ä 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –¥–ª—è 'octocat' –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π");
    
    const pushResult = await client.callTool({
      name: "get_push_count",
      arguments: {
        username: "octocat",
        days: 7
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    pushResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });
    console.log("\n" + "=".repeat(50) + "\n");

    // –ü—Ä–∏–º–µ—Ä 2: –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log("üîç –ü—Ä–∏–º–µ—Ä 2: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'octocat'");
    
    const userResult = await client.callTool({
      name: "get_user_stats",
      arguments: {
        username: "octocat"
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    userResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });
    console.log("\n" + "=".repeat(50) + "\n");

    // –ü—Ä–∏–º–µ—Ä 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π
    console.log("üîç –ü—Ä–∏–º–µ—Ä 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—à–µ–π –∑–∞ 30 –¥–Ω–µ–π");
    
    const longTermResult = await client.callTool({
      name: "get_push_count",
      arguments: {
        username: "octocat",
        days: 30
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    longTermResult.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await client.close();
    serverProcess.kill();
    console.log("\nüèÅ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω");
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});

exampleUsage();
