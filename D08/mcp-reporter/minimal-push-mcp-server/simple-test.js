import { spawn } from "child_process";
import { Client } from "@modelcontextprotocol/sdk/client/index.js";
import { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";

async function simpleTest() {
  console.log("üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—É—à–µ–π\n");

  // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  const transport = new StdioClientTransport({
    command: "node",
    args: ["./dist/index.js"],
  });
  
  // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
  const client = new Client({
    name: "simple-test-client",
    version: "1.0.0",
  });

  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await client.connect(transport);
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n");

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    const tools = await client.listTools();
    console.log("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:");
    tools.tools.forEach(tool => {
      console.log(`  - ${tool.name}: ${tool.description}`);
    });
    console.log();

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É—à–µ–π
    console.log("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º get_push_count...");
    const result = await client.callTool({
      name: "get_push_count",
      arguments: {
        username: "octocat",
        days: 7
      }
    });

    console.log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
    result.content.forEach(content => {
      if (content.type === "text") {
        console.log(content.text);
      }
    });

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    await client.close();
    console.log("\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω");
  }
}

simpleTest().catch(console.error);
